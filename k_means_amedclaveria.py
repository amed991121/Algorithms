# -*- coding: utf-8 -*-
"""k_Means_AmedClaveria.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14WXZKzRShdwctDcNngtbFLoGCNFE_vCe
"""

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

iris = load_iris()
X = iris.data  # Solo las características

# Valores de k a evaluar
k_values = range(2, 9)
wcss = []  # Almacenar la suma de cuadrados intra-cluster
silhouette_scores = []  # Almacenar coeficientes de Silhouette
all_labels = []  # Almacenar etiquetas de los clusters

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)  # Inercia = WCSS

    # Calcular Silhouette
    labels = kmeans.labels_
    all_labels.append(labels)
    score = silhouette_score(X, labels)
    silhouette_scores.append(score)

# Graficar WCSS vs k
plt.figure(figsize=(8, 5))
plt.plot(k_values, wcss, 'bo-')
plt.xlabel('Número de clusters (k)')
plt.ylabel('WCSS')
plt.title('Método del Codo para Iris Plant')
plt.axvline(x=3, color='red', linestyle='--', linewidth=1, label='Punto de codo')
plt.xticks(k_values)
plt.grid(True, alpha=0.7)
plt.legend()
plt.show()

# Crear tabla de resultados
print("k | Coeficiente de Silhouette")
print("-----------------------------")
for k, score in zip(k_values, silhouette_scores):
    print(f"{k} | {score:.4f}")

# Graficar clusters
plt.figure(figsize=(8,5))
plt.scatter(X[:,0], X[:,1], c=all_labels[1], cmap='viridis')
plt.xlabel("Característica 1")
plt.ylabel("Característica 2")
plt.title(f"Visualización de clusters con k={3}")
plt.show()